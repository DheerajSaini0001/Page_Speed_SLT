"use strict";

// eslint-disable-next-line import/no-unassigned-import
require('console-polyfill');

// eslint-disable-next-line unicorn/prefer-node-protocol
const os = require('os');
const format = require('@ladjs/format-util');
const formatSpecifiers = require('format-specifiers');
const get = require('@strikeentco/get');
const isError = require('iserror');
const isSymbol = require('is-symbol');
const isBuffer = require('is-buffer');
const mergeOptions = require('merge-options');
const pMapSeries = require('p-map-series');
const parseAppInfo = require('parse-app-info');
const parseErr = require('parse-err');
const pickDeep = require('pick-deep');
const set = require('@strikeentco/set');
const unset = require('unset-value');
const {
  boolean
} = require('boolean');
const pkg = require('../package.json');
const silentSymbol = Symbol.for('axe.silent');
const omittedLoggerKeys = new Set(['config', 'log']);
const levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];
const aliases = {
  warning: 'warn',
  err: 'error'
};
const levelError = `\`level\` invalid, must be: ${levels.join(', ')}`;
const name = process.env.NODE_ENV === 'development' ? false : process.env.HOSTNAME || os.hostname();

// <https://github.com/sindresorhus/is-plain-obj/blob/main/index.js>
function isPlainObject(value) {
  if (typeof value !== 'object' || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value) && !isSymbol(value);
}

// <https://github.com/GeenenTijd/dotify/blob/master/dotify.js>
function dotifyToArray(obj) {
  const res = [];
  function recurse(obj, current) {
    // if it's a buffer, uint8array, or array
    if (isBuffer(obj) || obj.constructor && obj.constructor.name === 'Uint8Array' || Array.isArray(obj)) return;
    for (const key of Reflect.ownKeys(obj)) {
      const value = obj[key];
      const convertedKey = isSymbol(key) ? Symbol.keyFor(key) || key.description : key;
      const newKey = current ? current + '.' + convertedKey : convertedKey; // joined key with dot
      // if (value && typeof value === 'object' && !(value instanceof Date) && !ObjectID.isValid(value)) {
      if (isPlainObject(value) && res.indexOf(convertedKey) === -1) {
        res.push(convertedKey);
        recurse(value, newKey); // it's a nested object, so do it again
      } else if (res.indexOf(newKey) === -1) {
        res.push(newKey);
      }
    }
  }
  recurse(obj);
  return res;
}

// <https://stackoverflow.com/a/43233163>
function isEmpty(value) {
  return value === undefined || value === null || typeof value === 'object' && Reflect.ownKeys(value).length === 0 || typeof value === 'string' && value.trim().length === 0;
}
function isNull(value) {
  return value === null;
}
function isUndefined(value) {
  return value === undefined;
}
function isObject(value) {
  return typeof value === 'object' && value !== null && !Array.isArray(value);
}
function isString(value) {
  return typeof value === 'string';
}
function isFunction(value) {
  return typeof value === 'function';
}
function getFunction(value) {
  return isFunction(value) ? value : null;
}
class Axe {
  // eslint-disable-next-line complexity
  constructor() {
    var _this = this;
    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const remappedFields = {};
    if (process.env.AXE_REMAPPED_META_FIELDS) {
      const fields = process.env.AXE_REMAPPED_META_FIELDS;
      const arr = fields.split(',').map(v => v.split(':'));
      for (const [prop, value] of arr) {
        remappedFields[prop] = value;
      }
    }

    // envify does not support conditionals well enough so we declare vars outside
    let omittedFields = process.env.AXE_OMIT_META_FIELDS;
    if (typeof omittedFields === 'string') omittedFields = omittedFields.split(',').map(s => s.trim());
    if (!Array.isArray(omittedFields)) omittedFields = [];
    let pickedFields = process.env.AXE_PICK_META_FIELDS;
    if (typeof pickedFields === 'string') pickedFields = pickedFields.split(',').map(s => s.trim());
    if (!Array.isArray(pickedFields)) pickedFields = [];
    this.config = mergeOptions({
      showStack: process.env.AXE_SHOW_STACK ? boolean(process.env.AXE_SHOW_STACK) : true,
      meta: Object.assign({
        show: process.env.AXE_SHOW_META ? boolean(process.env.AXE_SHOW_META) : true,
        remappedFields,
        omittedFields,
        pickedFields,
        cleanupRemapping: true,
        hideHTTP: 'is_http',
        // implemented mainly for @ladjs/graceful to
        // suppress unnecessary meta output to console
        hideMeta: 'hide_meta'
      }, typeof config.meta === 'object' ? config.meta : {}),
      version: pkg.version,
      silent: false,
      logger: console,
      name,
      level: 'info',
      levels: ['info', 'warn', 'error', 'fatal'],
      appInfo: process.env.AXE_APP_INFO ? boolean(process.env.AXE_APP_INFO) : true,
      hooks: Object.assign({
        pre: [],
        post: []
      }, typeof config.hooks === 'object' ? config.hooks : {})
    }, config);
    this.appInfo = this.config.appInfo ? isFunction(parseAppInfo) ? parseAppInfo() : false : false;
    this.log = this.log.bind(this);

    // Inherit methods from parent logger
    const methods = Object.keys(this.config.logger).filter(key => !omittedLoggerKeys.has(key));
    for (const element of methods) {
      this[element] = this.config.logger[element];
    }

    // Bind helper functions for each log level
    for (const element of levels) {
      // Ensure function exists in logger passed
      if (element === 'fatal') {
        this.config.logger.fatal = getFunction(this.config.logger[element]) || getFunction(this.config.logger.error) || getFunction(this.config.logger.info) || getFunction(this.config.logger.log);
      } else {
        this.config.logger[element] = getFunction(this.config.logger[element]) || getFunction(this.config.logger.info) || getFunction(this.config.logger.log);
      }
      if (!isFunction(this.config.logger[element])) {
        throw new Error(`\`${element}\` must be a function on the logger.`);
      }

      // Bind log handler which normalizes args and populates meta
      this[element] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _this.log(element, ...Array.prototype.slice.call(args));
      };
    }
    this.setLevel = this.setLevel.bind(this);
    this.getNormalizedLevel = this.getNormalizedLevel.bind(this);
    this.setName = this.setName.bind(this);

    // Set the logger name
    if (this.config.name) this.setName(this.config.name);

    // Set the logger level
    this.setLevel(this.config.level);

    // Aliases
    this.err = this.error;
    this.warning = this.warn;

    // Pre and Post Hooks
    this.pre = function (level, fn) {
      this.config.hooks.pre.push(function (_level) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        if (level !== _level) return [...args];
        return fn(...args);
      });
    };
    this.post = function (level, fn) {
      this.config.hooks.post.push(function (_level) {
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        if (level !== _level) return [...args];
        return fn(...args);
      });
    };
  }
  setLevel(level) {
    if (!isString(level) || levels.indexOf(level) === -1) throw new Error(levelError);
    // Support signale logger and other loggers that use `logLevel`
    if (isString(this.config.logger.logLevel)) this.config.logger.logLevel = level;else this.config.logger.level = level;
    // Adjusts `this.config.levels` array
    // so that it has all proceeding (inclusive)
    this.config.levels = levels.slice(levels.indexOf(level));
  }
  getNormalizedLevel(level) {
    if (!isString(level)) return 'info';
    if (isString(aliases[level])) return aliases[level];
    if (levels.indexOf(level) === -1) return 'info';
    return level;
  }
  setName(name) {
    if (!isString(name)) throw new Error('`name` must be a String');
    // Support signale logger and other loggers that use `scope`
    if (isString(this.config.logger.scope)) this.config.logger.scope = name;else this.config.logger.name = name;
  }

  // eslint-disable-next-line complexity
  log(level, message, meta) {
    const originalArgs = [];
    const errors = [];
    let hasMessage = false;
    let hasLevel = true;
    if (!isUndefined(level)) originalArgs.push(level);
    if (!isUndefined(message)) originalArgs.push(message);
    if (!isUndefined(meta)) originalArgs.push(meta);
    for (var _len4 = arguments.length, args = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {
      args[_key4 - 3] = arguments[_key4];
    }
    for (const arg of Array.prototype.slice.call(args)) {
      originalArgs.push(arg);
    }
    let modifier = 0;
    if (isString(level) && isString(aliases[level])) {
      level = aliases[level];
    } else if (isError(level)) {
      hasLevel = false;
      meta = message;
      message = level;
      level = 'error';
    } else if (!isString(level) || levels.indexOf(level) === -1) {
      hasLevel = false;
      meta = message;
      message = level;
      level = this.getNormalizedLevel(level);
      modifier = -1;
    }

    // Return early if it is not a valid logging level
    if (this.config.levels.indexOf(level) === -1) return;

    // Bunyan support (meta, message, ...args)
    let isBunyan = false;
    if ((isObject(message) || Array.isArray(message)) && isString(meta)) {
      isBunyan = true;
      const _meta = meta;
      meta = message;
      message = isString(_meta) && originalArgs.length >= 3 + modifier ? format(...originalArgs.slice(2 + modifier)) : _meta;
    }

    // If message was undefined then set it to level
    if (isUndefined(message)) message = level;

    // If only `message` was passed then if it was an Object
    // preserve it as an Object by setting it as meta
    if (originalArgs.slice(1 + modifier).length === 1 && !isString(message) && !isError(message)) {
      meta = {
        message
      };
      message = level;
    } else if (!isBunyan && originalArgs.length >= 4 + modifier) {
      message = undefined;
      meta = {};
      const messages = [];
      for (const arg of originalArgs.slice(hasLevel && modifier === 0 ? 1 : 0)) {
        if (isError(arg)) errors.push(arg);
        // pushes number, object, string, etc for formatting
        else messages.push(arg);
      }
      if (messages.length > 0) {
        message = format(...messages);
        hasMessage = true;
      }
      if (errors.length > 0 && level === 'log') level = 'error';
    } else if (!isBunyan && originalArgs.length === 3 + modifier && isString(message) && formatSpecifiers.some(t => message.indexOf(t) !== -1)) {
      // Otherwise if there are three args and if the `message` contains
      // a placeholder token (e.g. '%s' or '%d' - see above `formatSpecifiers` variable)
      // then we can infer that the `meta` arg passed is used for formatting
      message = format(message, meta);
      meta = {};
    } else if (!isError(message)) {
      if (isError(meta)) {
        errors.push(meta);
        meta = {};
      } else if (!isObject(meta) && !isUndefined(meta) && !isNull(meta)) {
        // If the `meta` variable passed was not an Object then convert it
        message = format(message, meta);
        meta = {};
      } else if (!isString(message)) {
        // If the message is not a string then we should run `util.format` on it
        // assuming we're formatting it like it was another argument
        // (as opposed to using something like fast-json-stringify)
        message = format(message);
      }
    } else if (isError(meta)) {
      errors.push(meta);
      // handle additional args
      const messages = [];
      if (isError(message)) {
        errors.unshift(message);
        message = undefined;
      }
      for (const arg of originalArgs.slice(2 + modifier)) {
        // should skip this better with slice and modifier adjustment
        if (meta === arg) continue;
        if (isError(arg)) errors.push(arg);else messages.push(arg);
        if (messages.length > 0) {
          message = format(...messages);
          hasMessage = true;
        }
      }
      if (level === 'log') level = 'error';
      meta = {};
    }
    if (!isUndefined(meta) && !isObject(meta)) meta = {
      original_meta: meta
    };else if (!isObject(meta)) meta = {};
    if (isError(message)) {
      errors.unshift(message);
      message = undefined;
    }

    //
    // rewrite `meta.err` to `meta.original_err` for consistency
    // (in case someone has an object with `.err` property on it with an error)
    //
    if (isObject(meta.err)) {
      if (isError(meta.err)) errors.push(meta.err);
      meta.original_err = isError(meta.err) ? parseErr(meta.err) : meta.err;
    }
    let err;
    if (errors.length > 0) {
      if (errors.length === 1) {
        err = errors[0];
      } else {
        err = new Error([...new Set(errors.map(e => e.message).filter(Boolean))].join('; '));
        err.stack = [...new Set(errors.map(e => e.stack).filter(Boolean))].join('\n\n');
        err.errors = errors;
      }
      meta.err = parseErr(err);
      if (!isString(message)) message = err.message;
    }

    //
    // NOTE: this was removed in v10.2.2 due to circular reference issues
    //       (the workaround would involve safeStringify and then JSON.parse which would be perf bloat)
    //       (there still might be another workaround or perhaps we don't add all the args here except additional)
    //
    // Set `args` prop with original arguments passed
    // meta.args = originalArgs;

    // Set default level on meta
    meta.level = level;

    // Add `app` object to metadata
    if (this.appInfo) meta.app = this.appInfo;

    //
    // determine log method to use
    //
    // if we didn't pass a level as a method
    // (e.g. console.info), then we should still
    // use the logger's `log` method to output
    //
    // and fatal should use error (e.g. in browser)
    //
    const method = modifier === -1 ? 'log' : level;

    // pre-hooks
    for (const hook of this.config.hooks.pre) {
      [err, message, meta] = hook(method, err, message, meta);
    }

    //
    // NOTE: using lodash _.omit and _.pick would have been _very slow_
    //
    // const omittedAndPickedFields = {
    //   ..._.omit(meta, this.config.meta.omittedFields),
    //   ..._.pick(meta, this.config.meta.pickedFields)
    // };
    //
    // also we don't want to mutate anything in `meta`
    // and ideally we only want to pick exactly what we need
    // (and not have two operations, one for omit, and one for pick)
    //

    // set a boolean flag if we had the silent symbol or not
    const hadTrueSilentSymbol = boolean(meta[silentSymbol]);
    if (!isEmpty(this.config.meta.remappedFields)) {
      for (const key of Reflect.ownKeys(this.config.meta.remappedFields)) {
        set(meta, this.config.meta.remappedFields[key], get(meta, key));
        unset(meta, key);
        // cleanup empty objects after remapping
        if (this.config.meta.cleanupRemapping) {
          const index = key.lastIndexOf('.');
          if (index === -1) continue;
          const parentKey = key.slice(0, index);
          if (isEmpty(get(meta, parentKey))) unset(meta, parentKey);
        }
      }
    }
    if (!isEmpty(this.config.meta.omittedFields) || !isEmpty(this.config.meta.pickedFields)) {
      const dotified = dotifyToArray(meta);
      // dotified = [
      //   'err.name',
      //   'err.message',
      //   'err.stack',
      //   'level',
      //   'app.name',
      //   'app.version',
      //   'app.node',
      //   'app.hash',
      //   // ...
      // ]

      if (!isEmpty(this.config.meta.omittedFields)) {
        for (const prop of this.config.meta.omittedFields) {
          // <https://stackoverflow.com/a/9882349>
          let i = dotified.length;
          while (i--) {
            if (dotified[i] === prop || !isSymbol(dotified[i]) && dotified[i].indexOf(`${prop}.`) === 0) dotified.splice(i, 1);
          }
        }
      }
      const pickedSymbols = [];
      if (!isEmpty(this.config.meta.pickedFields)) {
        for (const prop of this.config.meta.pickedFields) {
          // response.headers.boop
          // response.headers.beep
          // response.body
          // response.text
          // response
          //
          // so we need to split by the first period and omit any keys from dotified starting with it
          if (isSymbol(prop)) {
            if (meta[prop]) pickedSymbols.push([prop, meta[prop]]);
          } else {
            const index = prop.indexOf('.');
            const key = prop.slice(0, index + 1);
            if (index !== -1) {
              let i = dotified.length;
              while (i--) {
                if (dotified[i] === key.slice(0, -1)) dotified.splice(i, 1);else if (dotified[i].indexOf(key) === 0) dotified.splice(i, 1);
              }
            }
          }

          // finally add it if it did not already exist
          if (dotified.indexOf(prop) === -1) dotified.push(prop);
        }
      }

      //
      // iterate over all dotified values to check for symbols
      //
      // NOTE: this does not take into account that they could already be in `pickedSymbols`
      //       (and it doesn't also do bigints yet)
      //
      for (const prop of dotified) {
        if (isSymbol(prop)) {
          if (meta[prop] !== undefined) pickedSymbols.push([prop, meta[prop]]);
        } else if (meta[Symbol.for(prop)] !== undefined) {
          pickedSymbols.push([Symbol.for(prop), meta[Symbol.for(prop)]]);
        }
      }

      //
      // now we call pick-deep using the final array
      //
      // NOTE: this does not pick symbols, bigints, nor streams
      //       <https://github.com/strikeentco/pick-deep/issues/2>
      //       <https://github.com/strikeentco/pick-deep/issues/2>
      //
      // NOTE: this is wrapped in try/catch in case similar errors occur
      //       <https://github.com/stripe/stripe-node/issues/1796>
      //
      try {
        meta = pickDeep(meta, dotified);
      } catch (err) {
        this.config.logger.error(err);
      }

      //
      // if there were any top-level symbols to be
      // picked then we need to add them back here to the list
      //
      // NOTE: we'd probably want to do the same for bigints as symbols
      //
      if (pickedSymbols.length > 0) {
        for (const [key, value] of pickedSymbols) {
          meta[key] = value;
        }
      }
    }

    // only invoke logger methods if it was not silent
    if (!this.config.silent && !hadTrueSilentSymbol) {
      // Show stack trace if necessary (along with any metadata)
      if (isError(err) && this.config.showStack) {
        if (!this.config.meta.show || isEmpty(meta)) {
          this.config.logger[method](...(hasMessage ? [message, err] : [err]));
        } else if (this.config.meta.hideMeta && meta[this.config.meta.hideMeta]) {
          this.config.logger[method](...(hasMessage ? [message, err] : [err]));
        } else {
          this.config.logger[method](...(hasMessage ? [message, err, meta] : [err, meta]));
        }
      } else if (!this.config.meta.show || isEmpty(meta)) {
        this.config.logger[method](message);
      } else if (this.config.meta.hideMeta && meta[this.config.meta.hideMeta] || this.config.meta.hideHTTP && meta[this.config.meta.hideHTTP]) {
        this.config.logger[method](message);
      } else {
        this.config.logger[method](message, meta);
      }
    }

    // post-hooks
    if (this.config.hooks.post.length === 0) return {
      method,
      err,
      message,
      meta
    };
    return pMapSeries(this.config.hooks.post, hook => hook(method, err, message, meta)).then().catch(err => {
      this.config.logger.error(err);
    });
  }
}
module.exports = Axe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwib3MiLCJmb3JtYXQiLCJmb3JtYXRTcGVjaWZpZXJzIiwiZ2V0IiwiaXNFcnJvciIsImlzU3ltYm9sIiwiaXNCdWZmZXIiLCJtZXJnZU9wdGlvbnMiLCJwTWFwU2VyaWVzIiwicGFyc2VBcHBJbmZvIiwicGFyc2VFcnIiLCJwaWNrRGVlcCIsInNldCIsInVuc2V0IiwiYm9vbGVhbiIsInBrZyIsInNpbGVudFN5bWJvbCIsIlN5bWJvbCIsImZvciIsIm9taXR0ZWRMb2dnZXJLZXlzIiwiU2V0IiwibGV2ZWxzIiwiYWxpYXNlcyIsIndhcm5pbmciLCJlcnIiLCJsZXZlbEVycm9yIiwiam9pbiIsIm5hbWUiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJIT1NUTkFNRSIsImhvc3RuYW1lIiwiaXNQbGFpbk9iamVjdCIsInZhbHVlIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJ0b1N0cmluZ1RhZyIsIml0ZXJhdG9yIiwiZG90aWZ5VG9BcnJheSIsIm9iaiIsInJlcyIsInJlY3Vyc2UiLCJjdXJyZW50IiwiY29uc3RydWN0b3IiLCJBcnJheSIsImlzQXJyYXkiLCJrZXkiLCJSZWZsZWN0Iiwib3duS2V5cyIsImNvbnZlcnRlZEtleSIsImtleUZvciIsImRlc2NyaXB0aW9uIiwibmV3S2V5IiwiaW5kZXhPZiIsInB1c2giLCJpc0VtcHR5IiwidW5kZWZpbmVkIiwibGVuZ3RoIiwidHJpbSIsImlzTnVsbCIsImlzVW5kZWZpbmVkIiwiaXNPYmplY3QiLCJpc1N0cmluZyIsImlzRnVuY3Rpb24iLCJnZXRGdW5jdGlvbiIsIkF4ZSIsIl90aGlzIiwiY29uZmlnIiwiYXJndW1lbnRzIiwicmVtYXBwZWRGaWVsZHMiLCJBWEVfUkVNQVBQRURfTUVUQV9GSUVMRFMiLCJmaWVsZHMiLCJhcnIiLCJzcGxpdCIsIm1hcCIsInYiLCJwcm9wIiwib21pdHRlZEZpZWxkcyIsIkFYRV9PTUlUX01FVEFfRklFTERTIiwicyIsInBpY2tlZEZpZWxkcyIsIkFYRV9QSUNLX01FVEFfRklFTERTIiwic2hvd1N0YWNrIiwiQVhFX1NIT1dfU1RBQ0siLCJtZXRhIiwiYXNzaWduIiwic2hvdyIsIkFYRV9TSE9XX01FVEEiLCJjbGVhbnVwUmVtYXBwaW5nIiwiaGlkZUhUVFAiLCJoaWRlTWV0YSIsInZlcnNpb24iLCJzaWxlbnQiLCJsb2dnZXIiLCJjb25zb2xlIiwibGV2ZWwiLCJhcHBJbmZvIiwiQVhFX0FQUF9JTkZPIiwiaG9va3MiLCJwcmUiLCJwb3N0IiwibG9nIiwiYmluZCIsIm1ldGhvZHMiLCJrZXlzIiwiZmlsdGVyIiwiaGFzIiwiZWxlbWVudCIsImZhdGFsIiwiZXJyb3IiLCJpbmZvIiwiRXJyb3IiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJzbGljZSIsImNhbGwiLCJzZXRMZXZlbCIsImdldE5vcm1hbGl6ZWRMZXZlbCIsInNldE5hbWUiLCJ3YXJuIiwiZm4iLCJfbGV2ZWwiLCJfbGVuMiIsIl9rZXkyIiwiX2xlbjMiLCJfa2V5MyIsImxvZ0xldmVsIiwic2NvcGUiLCJtZXNzYWdlIiwib3JpZ2luYWxBcmdzIiwiZXJyb3JzIiwiaGFzTWVzc2FnZSIsImhhc0xldmVsIiwiX2xlbjQiLCJfa2V5NCIsImFyZyIsIm1vZGlmaWVyIiwiaXNCdW55YW4iLCJfbWV0YSIsIm1lc3NhZ2VzIiwic29tZSIsInQiLCJ1bnNoaWZ0Iiwib3JpZ2luYWxfbWV0YSIsIm9yaWdpbmFsX2VyciIsImUiLCJCb29sZWFuIiwic3RhY2siLCJhcHAiLCJtZXRob2QiLCJob29rIiwiaGFkVHJ1ZVNpbGVudFN5bWJvbCIsImluZGV4IiwibGFzdEluZGV4T2YiLCJwYXJlbnRLZXkiLCJkb3RpZmllZCIsImkiLCJzcGxpY2UiLCJwaWNrZWRTeW1ib2xzIiwidGhlbiIsImNhdGNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVuYXNzaWduZWQtaW1wb3J0XG5yZXF1aXJlKCdjb25zb2xlLXBvbHlmaWxsJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3ByZWZlci1ub2RlLXByb3RvY29sXG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBmb3JtYXQgPSByZXF1aXJlKCdAbGFkanMvZm9ybWF0LXV0aWwnKTtcbmNvbnN0IGZvcm1hdFNwZWNpZmllcnMgPSByZXF1aXJlKCdmb3JtYXQtc3BlY2lmaWVycycpO1xuY29uc3QgZ2V0ID0gcmVxdWlyZSgnQHN0cmlrZWVudGNvL2dldCcpO1xuY29uc3QgaXNFcnJvciA9IHJlcXVpcmUoJ2lzZXJyb3InKTtcbmNvbnN0IGlzU3ltYm9sID0gcmVxdWlyZSgnaXMtc3ltYm9sJyk7XG5jb25zdCBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuY29uc3QgbWVyZ2VPcHRpb25zID0gcmVxdWlyZSgnbWVyZ2Utb3B0aW9ucycpO1xuY29uc3QgcE1hcFNlcmllcyA9IHJlcXVpcmUoJ3AtbWFwLXNlcmllcycpO1xuY29uc3QgcGFyc2VBcHBJbmZvID0gcmVxdWlyZSgncGFyc2UtYXBwLWluZm8nKTtcbmNvbnN0IHBhcnNlRXJyID0gcmVxdWlyZSgncGFyc2UtZXJyJyk7XG5jb25zdCBwaWNrRGVlcCA9IHJlcXVpcmUoJ3BpY2stZGVlcCcpO1xuY29uc3Qgc2V0ID0gcmVxdWlyZSgnQHN0cmlrZWVudGNvL3NldCcpO1xuY29uc3QgdW5zZXQgPSByZXF1aXJlKCd1bnNldC12YWx1ZScpO1xuY29uc3QgeyBib29sZWFuIH0gPSByZXF1aXJlKCdib29sZWFuJyk7XG5jb25zdCBwa2cgPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKTtcblxuY29uc3Qgc2lsZW50U3ltYm9sID0gU3ltYm9sLmZvcignYXhlLnNpbGVudCcpO1xuY29uc3Qgb21pdHRlZExvZ2dlcktleXMgPSBuZXcgU2V0KFsnY29uZmlnJywgJ2xvZyddKTtcbmNvbnN0IGxldmVscyA9IFsndHJhY2UnLCAnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJywgJ2ZhdGFsJ107XG5jb25zdCBhbGlhc2VzID0geyB3YXJuaW5nOiAnd2FybicsIGVycjogJ2Vycm9yJyB9O1xuY29uc3QgbGV2ZWxFcnJvciA9IGBcXGBsZXZlbFxcYCBpbnZhbGlkLCBtdXN0IGJlOiAke2xldmVscy5qb2luKCcsICcpfWA7XG5jb25zdCBuYW1lID1cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCdcbiAgICA/IGZhbHNlXG4gICAgOiBwcm9jZXNzLmVudi5IT1NUTkFNRSB8fCBvcy5ob3N0bmFtZSgpO1xuXG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9pcy1wbGFpbi1vYmovYmxvYi9tYWluL2luZGV4LmpzPlxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG4gIHJldHVybiAoXG4gICAgKHByb3RvdHlwZSA9PT0gbnVsbCB8fFxuICAgICAgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8XG4gICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiZcbiAgICAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkgJiZcbiAgICAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWx1ZSkgJiZcbiAgICAhaXNTeW1ib2wodmFsdWUpXG4gICk7XG59XG5cbi8vIDxodHRwczovL2dpdGh1Yi5jb20vR2VlbmVuVGlqZC9kb3RpZnkvYmxvYi9tYXN0ZXIvZG90aWZ5LmpzPlxuZnVuY3Rpb24gZG90aWZ5VG9BcnJheShvYmopIHtcbiAgY29uc3QgcmVzID0gW107XG4gIGZ1bmN0aW9uIHJlY3Vyc2Uob2JqLCBjdXJyZW50KSB7XG4gICAgLy8gaWYgaXQncyBhIGJ1ZmZlciwgdWludDhhcnJheSwgb3IgYXJyYXlcbiAgICBpZiAoXG4gICAgICBpc0J1ZmZlcihvYmopIHx8XG4gICAgICAob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpIHx8XG4gICAgICBBcnJheS5pc0FycmF5KG9iailcbiAgICApXG4gICAgICByZXR1cm47XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBSZWZsZWN0Lm93bktleXMob2JqKSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgIGNvbnN0IGNvbnZlcnRlZEtleSA9IGlzU3ltYm9sKGtleSlcbiAgICAgICAgPyBTeW1ib2wua2V5Rm9yKGtleSkgfHwga2V5LmRlc2NyaXB0aW9uXG4gICAgICAgIDoga2V5O1xuICAgICAgY29uc3QgbmV3S2V5ID0gY3VycmVudCA/IGN1cnJlbnQgKyAnLicgKyBjb252ZXJ0ZWRLZXkgOiBjb252ZXJ0ZWRLZXk7IC8vIGpvaW5lZCBrZXkgd2l0aCBkb3RcbiAgICAgIC8vIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICEodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSAmJiAhT2JqZWN0SUQuaXNWYWxpZCh2YWx1ZSkpIHtcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSAmJiByZXMuaW5kZXhPZihjb252ZXJ0ZWRLZXkpID09PSAtMSkge1xuICAgICAgICByZXMucHVzaChjb252ZXJ0ZWRLZXkpO1xuICAgICAgICByZWN1cnNlKHZhbHVlLCBuZXdLZXkpOyAvLyBpdCdzIGEgbmVzdGVkIG9iamVjdCwgc28gZG8gaXQgYWdhaW5cbiAgICAgIH0gZWxzZSBpZiAocmVzLmluZGV4T2YobmV3S2V5KSA9PT0gLTEpIHtcbiAgICAgICAgcmVzLnB1c2gobmV3S2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZWN1cnNlKG9iaik7XG4gIHJldHVybiByZXM7XG59XG5cbi8vIDxodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDMyMzMxNjM+XG5mdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgIHZhbHVlID09PSBudWxsIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgUmVmbGVjdC5vd25LZXlzKHZhbHVlKS5sZW5ndGggPT09IDApIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUudHJpbSgpLmxlbmd0aCA9PT0gMClcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gZ2V0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUgOiBudWxsO1xufVxuXG5jbGFzcyBBeGUge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIGNvbnN0IHJlbWFwcGVkRmllbGRzID0ge307XG4gICAgaWYgKHByb2Nlc3MuZW52LkFYRV9SRU1BUFBFRF9NRVRBX0ZJRUxEUykge1xuICAgICAgY29uc3QgZmllbGRzID0gcHJvY2Vzcy5lbnYuQVhFX1JFTUFQUEVEX01FVEFfRklFTERTO1xuICAgICAgY29uc3QgYXJyID0gZmllbGRzLnNwbGl0KCcsJykubWFwKCh2KSA9PiB2LnNwbGl0KCc6JykpO1xuICAgICAgZm9yIChjb25zdCBbcHJvcCwgdmFsdWVdIG9mIGFycikge1xuICAgICAgICByZW1hcHBlZEZpZWxkc1twcm9wXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGVudmlmeSBkb2VzIG5vdCBzdXBwb3J0IGNvbmRpdGlvbmFscyB3ZWxsIGVub3VnaCBzbyB3ZSBkZWNsYXJlIHZhcnMgb3V0c2lkZVxuICAgIGxldCBvbWl0dGVkRmllbGRzID0gcHJvY2Vzcy5lbnYuQVhFX09NSVRfTUVUQV9GSUVMRFM7XG4gICAgaWYgKHR5cGVvZiBvbWl0dGVkRmllbGRzID09PSAnc3RyaW5nJylcbiAgICAgIG9taXR0ZWRGaWVsZHMgPSBvbWl0dGVkRmllbGRzLnNwbGl0KCcsJykubWFwKChzKSA9PiBzLnRyaW0oKSk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG9taXR0ZWRGaWVsZHMpKSBvbWl0dGVkRmllbGRzID0gW107XG5cbiAgICBsZXQgcGlja2VkRmllbGRzID0gcHJvY2Vzcy5lbnYuQVhFX1BJQ0tfTUVUQV9GSUVMRFM7XG4gICAgaWYgKHR5cGVvZiBwaWNrZWRGaWVsZHMgPT09ICdzdHJpbmcnKVxuICAgICAgcGlja2VkRmllbGRzID0gcGlja2VkRmllbGRzLnNwbGl0KCcsJykubWFwKChzKSA9PiBzLnRyaW0oKSk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBpY2tlZEZpZWxkcykpIHBpY2tlZEZpZWxkcyA9IFtdO1xuXG4gICAgdGhpcy5jb25maWcgPSBtZXJnZU9wdGlvbnMoXG4gICAgICB7XG4gICAgICAgIHNob3dTdGFjazogcHJvY2Vzcy5lbnYuQVhFX1NIT1dfU1RBQ0tcbiAgICAgICAgICA/IGJvb2xlYW4ocHJvY2Vzcy5lbnYuQVhFX1NIT1dfU1RBQ0spXG4gICAgICAgICAgOiB0cnVlLFxuICAgICAgICBtZXRhOiBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNob3c6IHByb2Nlc3MuZW52LkFYRV9TSE9XX01FVEFcbiAgICAgICAgICAgICAgPyBib29sZWFuKHByb2Nlc3MuZW52LkFYRV9TSE9XX01FVEEpXG4gICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgICAgICAgIHJlbWFwcGVkRmllbGRzLFxuICAgICAgICAgICAgb21pdHRlZEZpZWxkcyxcbiAgICAgICAgICAgIHBpY2tlZEZpZWxkcyxcbiAgICAgICAgICAgIGNsZWFudXBSZW1hcHBpbmc6IHRydWUsXG4gICAgICAgICAgICBoaWRlSFRUUDogJ2lzX2h0dHAnLFxuICAgICAgICAgICAgLy8gaW1wbGVtZW50ZWQgbWFpbmx5IGZvciBAbGFkanMvZ3JhY2VmdWwgdG9cbiAgICAgICAgICAgIC8vIHN1cHByZXNzIHVubmVjZXNzYXJ5IG1ldGEgb3V0cHV0IHRvIGNvbnNvbGVcbiAgICAgICAgICAgIGhpZGVNZXRhOiAnaGlkZV9tZXRhJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHlwZW9mIGNvbmZpZy5tZXRhID09PSAnb2JqZWN0JyA/IGNvbmZpZy5tZXRhIDoge31cbiAgICAgICAgKSxcbiAgICAgICAgdmVyc2lvbjogcGtnLnZlcnNpb24sXG4gICAgICAgIHNpbGVudDogZmFsc2UsXG4gICAgICAgIGxvZ2dlcjogY29uc29sZSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgbGV2ZWw6ICdpbmZvJyxcbiAgICAgICAgbGV2ZWxzOiBbJ2luZm8nLCAnd2FybicsICdlcnJvcicsICdmYXRhbCddLFxuICAgICAgICBhcHBJbmZvOiBwcm9jZXNzLmVudi5BWEVfQVBQX0lORk9cbiAgICAgICAgICA/IGJvb2xlYW4ocHJvY2Vzcy5lbnYuQVhFX0FQUF9JTkZPKVxuICAgICAgICAgIDogdHJ1ZSxcbiAgICAgICAgaG9va3M6IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAge1xuICAgICAgICAgICAgcHJlOiBbXSxcbiAgICAgICAgICAgIHBvc3Q6IFtdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0eXBlb2YgY29uZmlnLmhvb2tzID09PSAnb2JqZWN0JyA/IGNvbmZpZy5ob29rcyA6IHt9XG4gICAgICAgIClcbiAgICAgIH0sXG4gICAgICBjb25maWdcbiAgICApO1xuXG4gICAgdGhpcy5hcHBJbmZvID0gdGhpcy5jb25maWcuYXBwSW5mb1xuICAgICAgPyBpc0Z1bmN0aW9uKHBhcnNlQXBwSW5mbylcbiAgICAgICAgPyBwYXJzZUFwcEluZm8oKVxuICAgICAgICA6IGZhbHNlXG4gICAgICA6IGZhbHNlO1xuXG4gICAgdGhpcy5sb2cgPSB0aGlzLmxvZy5iaW5kKHRoaXMpO1xuXG4gICAgLy8gSW5oZXJpdCBtZXRob2RzIGZyb20gcGFyZW50IGxvZ2dlclxuICAgIGNvbnN0IG1ldGhvZHMgPSBPYmplY3Qua2V5cyh0aGlzLmNvbmZpZy5sb2dnZXIpLmZpbHRlcihcbiAgICAgIChrZXkpID0+ICFvbWl0dGVkTG9nZ2VyS2V5cy5oYXMoa2V5KVxuICAgICk7XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIG1ldGhvZHMpIHtcbiAgICAgIHRoaXNbZWxlbWVudF0gPSB0aGlzLmNvbmZpZy5sb2dnZXJbZWxlbWVudF07XG4gICAgfVxuXG4gICAgLy8gQmluZCBoZWxwZXIgZnVuY3Rpb25zIGZvciBlYWNoIGxvZyBsZXZlbFxuICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBsZXZlbHMpIHtcbiAgICAgIC8vIEVuc3VyZSBmdW5jdGlvbiBleGlzdHMgaW4gbG9nZ2VyIHBhc3NlZFxuICAgICAgaWYgKGVsZW1lbnQgPT09ICdmYXRhbCcpIHtcbiAgICAgICAgdGhpcy5jb25maWcubG9nZ2VyLmZhdGFsID1cbiAgICAgICAgICBnZXRGdW5jdGlvbih0aGlzLmNvbmZpZy5sb2dnZXJbZWxlbWVudF0pIHx8XG4gICAgICAgICAgZ2V0RnVuY3Rpb24odGhpcy5jb25maWcubG9nZ2VyLmVycm9yKSB8fFxuICAgICAgICAgIGdldEZ1bmN0aW9uKHRoaXMuY29uZmlnLmxvZ2dlci5pbmZvKSB8fFxuICAgICAgICAgIGdldEZ1bmN0aW9uKHRoaXMuY29uZmlnLmxvZ2dlci5sb2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb25maWcubG9nZ2VyW2VsZW1lbnRdID1cbiAgICAgICAgICBnZXRGdW5jdGlvbih0aGlzLmNvbmZpZy5sb2dnZXJbZWxlbWVudF0pIHx8XG4gICAgICAgICAgZ2V0RnVuY3Rpb24odGhpcy5jb25maWcubG9nZ2VyLmluZm8pIHx8XG4gICAgICAgICAgZ2V0RnVuY3Rpb24odGhpcy5jb25maWcubG9nZ2VyLmxvZyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNGdW5jdGlvbih0aGlzLmNvbmZpZy5sb2dnZXJbZWxlbWVudF0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgXFxgJHtlbGVtZW50fVxcYCBtdXN0IGJlIGEgZnVuY3Rpb24gb24gdGhlIGxvZ2dlci5gKTtcbiAgICAgIH1cblxuICAgICAgLy8gQmluZCBsb2cgaGFuZGxlciB3aGljaCBub3JtYWxpemVzIGFyZ3MgYW5kIHBvcHVsYXRlcyBtZXRhXG4gICAgICB0aGlzW2VsZW1lbnRdID0gKC4uLmFyZ3MpID0+XG4gICAgICAgIHRoaXMubG9nKGVsZW1lbnQsIC4uLkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldExldmVsID0gdGhpcy5zZXRMZXZlbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0Tm9ybWFsaXplZExldmVsID0gdGhpcy5nZXROb3JtYWxpemVkTGV2ZWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNldE5hbWUgPSB0aGlzLnNldE5hbWUuYmluZCh0aGlzKTtcblxuICAgIC8vIFNldCB0aGUgbG9nZ2VyIG5hbWVcbiAgICBpZiAodGhpcy5jb25maWcubmFtZSkgdGhpcy5zZXROYW1lKHRoaXMuY29uZmlnLm5hbWUpO1xuXG4gICAgLy8gU2V0IHRoZSBsb2dnZXIgbGV2ZWxcbiAgICB0aGlzLnNldExldmVsKHRoaXMuY29uZmlnLmxldmVsKTtcblxuICAgIC8vIEFsaWFzZXNcbiAgICB0aGlzLmVyciA9IHRoaXMuZXJyb3I7XG4gICAgdGhpcy53YXJuaW5nID0gdGhpcy53YXJuO1xuXG4gICAgLy8gUHJlIGFuZCBQb3N0IEhvb2tzXG4gICAgdGhpcy5wcmUgPSBmdW5jdGlvbiAobGV2ZWwsIGZuKSB7XG4gICAgICB0aGlzLmNvbmZpZy5ob29rcy5wcmUucHVzaChmdW5jdGlvbiAoX2xldmVsLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmIChsZXZlbCAhPT0gX2xldmVsKSByZXR1cm4gWy4uLmFyZ3NdO1xuICAgICAgICByZXR1cm4gZm4oLi4uYXJncyk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5wb3N0ID0gZnVuY3Rpb24gKGxldmVsLCBmbikge1xuICAgICAgdGhpcy5jb25maWcuaG9va3MucG9zdC5wdXNoKGZ1bmN0aW9uIChfbGV2ZWwsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKGxldmVsICE9PSBfbGV2ZWwpIHJldHVybiBbLi4uYXJnc107XG4gICAgICAgIHJldHVybiBmbiguLi5hcmdzKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBzZXRMZXZlbChsZXZlbCkge1xuICAgIGlmICghaXNTdHJpbmcobGV2ZWwpIHx8IGxldmVscy5pbmRleE9mKGxldmVsKSA9PT0gLTEpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobGV2ZWxFcnJvcik7XG4gICAgLy8gU3VwcG9ydCBzaWduYWxlIGxvZ2dlciBhbmQgb3RoZXIgbG9nZ2VycyB0aGF0IHVzZSBgbG9nTGV2ZWxgXG4gICAgaWYgKGlzU3RyaW5nKHRoaXMuY29uZmlnLmxvZ2dlci5sb2dMZXZlbCkpXG4gICAgICB0aGlzLmNvbmZpZy5sb2dnZXIubG9nTGV2ZWwgPSBsZXZlbDtcbiAgICBlbHNlIHRoaXMuY29uZmlnLmxvZ2dlci5sZXZlbCA9IGxldmVsO1xuICAgIC8vIEFkanVzdHMgYHRoaXMuY29uZmlnLmxldmVsc2AgYXJyYXlcbiAgICAvLyBzbyB0aGF0IGl0IGhhcyBhbGwgcHJvY2VlZGluZyAoaW5jbHVzaXZlKVxuICAgIHRoaXMuY29uZmlnLmxldmVscyA9IGxldmVscy5zbGljZShsZXZlbHMuaW5kZXhPZihsZXZlbCkpO1xuICB9XG5cbiAgZ2V0Tm9ybWFsaXplZExldmVsKGxldmVsKSB7XG4gICAgaWYgKCFpc1N0cmluZyhsZXZlbCkpIHJldHVybiAnaW5mbyc7XG4gICAgaWYgKGlzU3RyaW5nKGFsaWFzZXNbbGV2ZWxdKSkgcmV0dXJuIGFsaWFzZXNbbGV2ZWxdO1xuICAgIGlmIChsZXZlbHMuaW5kZXhPZihsZXZlbCkgPT09IC0xKSByZXR1cm4gJ2luZm8nO1xuICAgIHJldHVybiBsZXZlbDtcbiAgfVxuXG4gIHNldE5hbWUobmFtZSkge1xuICAgIGlmICghaXNTdHJpbmcobmFtZSkpIHRocm93IG5ldyBFcnJvcignYG5hbWVgIG11c3QgYmUgYSBTdHJpbmcnKTtcbiAgICAvLyBTdXBwb3J0IHNpZ25hbGUgbG9nZ2VyIGFuZCBvdGhlciBsb2dnZXJzIHRoYXQgdXNlIGBzY29wZWBcbiAgICBpZiAoaXNTdHJpbmcodGhpcy5jb25maWcubG9nZ2VyLnNjb3BlKSkgdGhpcy5jb25maWcubG9nZ2VyLnNjb3BlID0gbmFtZTtcbiAgICBlbHNlIHRoaXMuY29uZmlnLmxvZ2dlci5uYW1lID0gbmFtZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIGxvZyhsZXZlbCwgbWVzc2FnZSwgbWV0YSwgLi4uYXJncykge1xuICAgIGNvbnN0IG9yaWdpbmFsQXJncyA9IFtdO1xuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgIGxldCBoYXNNZXNzYWdlID0gZmFsc2U7XG4gICAgbGV0IGhhc0xldmVsID0gdHJ1ZTtcblxuICAgIGlmICghaXNVbmRlZmluZWQobGV2ZWwpKSBvcmlnaW5hbEFyZ3MucHVzaChsZXZlbCk7XG4gICAgaWYgKCFpc1VuZGVmaW5lZChtZXNzYWdlKSkgb3JpZ2luYWxBcmdzLnB1c2gobWVzc2FnZSk7XG4gICAgaWYgKCFpc1VuZGVmaW5lZChtZXRhKSkgb3JpZ2luYWxBcmdzLnB1c2gobWV0YSk7XG4gICAgZm9yIChjb25zdCBhcmcgb2YgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykpIHtcbiAgICAgIG9yaWdpbmFsQXJncy5wdXNoKGFyZyk7XG4gICAgfVxuXG4gICAgbGV0IG1vZGlmaWVyID0gMDtcblxuICAgIGlmIChpc1N0cmluZyhsZXZlbCkgJiYgaXNTdHJpbmcoYWxpYXNlc1tsZXZlbF0pKSB7XG4gICAgICBsZXZlbCA9IGFsaWFzZXNbbGV2ZWxdO1xuICAgIH0gZWxzZSBpZiAoaXNFcnJvcihsZXZlbCkpIHtcbiAgICAgIGhhc0xldmVsID0gZmFsc2U7XG4gICAgICBtZXRhID0gbWVzc2FnZTtcbiAgICAgIG1lc3NhZ2UgPSBsZXZlbDtcbiAgICAgIGxldmVsID0gJ2Vycm9yJztcbiAgICB9IGVsc2UgaWYgKCFpc1N0cmluZyhsZXZlbCkgfHwgbGV2ZWxzLmluZGV4T2YobGV2ZWwpID09PSAtMSkge1xuICAgICAgaGFzTGV2ZWwgPSBmYWxzZTtcbiAgICAgIG1ldGEgPSBtZXNzYWdlO1xuICAgICAgbWVzc2FnZSA9IGxldmVsO1xuICAgICAgbGV2ZWwgPSB0aGlzLmdldE5vcm1hbGl6ZWRMZXZlbChsZXZlbCk7XG4gICAgICBtb2RpZmllciA9IC0xO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBlYXJseSBpZiBpdCBpcyBub3QgYSB2YWxpZCBsb2dnaW5nIGxldmVsXG4gICAgaWYgKHRoaXMuY29uZmlnLmxldmVscy5pbmRleE9mKGxldmVsKSA9PT0gLTEpIHJldHVybjtcblxuICAgIC8vIEJ1bnlhbiBzdXBwb3J0IChtZXRhLCBtZXNzYWdlLCAuLi5hcmdzKVxuICAgIGxldCBpc0J1bnlhbiA9IGZhbHNlO1xuICAgIGlmICgoaXNPYmplY3QobWVzc2FnZSkgfHwgQXJyYXkuaXNBcnJheShtZXNzYWdlKSkgJiYgaXNTdHJpbmcobWV0YSkpIHtcbiAgICAgIGlzQnVueWFuID0gdHJ1ZTtcbiAgICAgIGNvbnN0IF9tZXRhID0gbWV0YTtcbiAgICAgIG1ldGEgPSBtZXNzYWdlO1xuICAgICAgbWVzc2FnZSA9XG4gICAgICAgIGlzU3RyaW5nKF9tZXRhKSAmJiBvcmlnaW5hbEFyZ3MubGVuZ3RoID49IDMgKyBtb2RpZmllclxuICAgICAgICAgID8gZm9ybWF0KC4uLm9yaWdpbmFsQXJncy5zbGljZSgyICsgbW9kaWZpZXIpKVxuICAgICAgICAgIDogX21ldGE7XG4gICAgfVxuXG4gICAgLy8gSWYgbWVzc2FnZSB3YXMgdW5kZWZpbmVkIHRoZW4gc2V0IGl0IHRvIGxldmVsXG4gICAgaWYgKGlzVW5kZWZpbmVkKG1lc3NhZ2UpKSBtZXNzYWdlID0gbGV2ZWw7XG5cbiAgICAvLyBJZiBvbmx5IGBtZXNzYWdlYCB3YXMgcGFzc2VkIHRoZW4gaWYgaXQgd2FzIGFuIE9iamVjdFxuICAgIC8vIHByZXNlcnZlIGl0IGFzIGFuIE9iamVjdCBieSBzZXR0aW5nIGl0IGFzIG1ldGFcbiAgICBpZiAoXG4gICAgICBvcmlnaW5hbEFyZ3Muc2xpY2UoMSArIG1vZGlmaWVyKS5sZW5ndGggPT09IDEgJiZcbiAgICAgICFpc1N0cmluZyhtZXNzYWdlKSAmJlxuICAgICAgIWlzRXJyb3IobWVzc2FnZSlcbiAgICApIHtcbiAgICAgIG1ldGEgPSB7IG1lc3NhZ2UgfTtcbiAgICAgIG1lc3NhZ2UgPSBsZXZlbDtcbiAgICB9IGVsc2UgaWYgKCFpc0J1bnlhbiAmJiBvcmlnaW5hbEFyZ3MubGVuZ3RoID49IDQgKyBtb2RpZmllcikge1xuICAgICAgbWVzc2FnZSA9IHVuZGVmaW5lZDtcbiAgICAgIG1ldGEgPSB7fTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gW107XG4gICAgICBmb3IgKGNvbnN0IGFyZyBvZiBvcmlnaW5hbEFyZ3Muc2xpY2UoXG4gICAgICAgIGhhc0xldmVsICYmIG1vZGlmaWVyID09PSAwID8gMSA6IDBcbiAgICAgICkpIHtcbiAgICAgICAgaWYgKGlzRXJyb3IoYXJnKSkgZXJyb3JzLnB1c2goYXJnKTtcbiAgICAgICAgLy8gcHVzaGVzIG51bWJlciwgb2JqZWN0LCBzdHJpbmcsIGV0YyBmb3IgZm9ybWF0dGluZ1xuICAgICAgICBlbHNlIG1lc3NhZ2VzLnB1c2goYXJnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbWVzc2FnZSA9IGZvcm1hdCguLi5tZXNzYWdlcyk7XG4gICAgICAgIGhhc01lc3NhZ2UgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDAgJiYgbGV2ZWwgPT09ICdsb2cnKSBsZXZlbCA9ICdlcnJvcic7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICFpc0J1bnlhbiAmJlxuICAgICAgb3JpZ2luYWxBcmdzLmxlbmd0aCA9PT0gMyArIG1vZGlmaWVyICYmXG4gICAgICBpc1N0cmluZyhtZXNzYWdlKSAmJlxuICAgICAgZm9ybWF0U3BlY2lmaWVycy5zb21lKCh0KSA9PiBtZXNzYWdlLmluZGV4T2YodCkgIT09IC0xKVxuICAgICkge1xuICAgICAgLy8gT3RoZXJ3aXNlIGlmIHRoZXJlIGFyZSB0aHJlZSBhcmdzIGFuZCBpZiB0aGUgYG1lc3NhZ2VgIGNvbnRhaW5zXG4gICAgICAvLyBhIHBsYWNlaG9sZGVyIHRva2VuIChlLmcuICclcycgb3IgJyVkJyAtIHNlZSBhYm92ZSBgZm9ybWF0U3BlY2lmaWVyc2AgdmFyaWFibGUpXG4gICAgICAvLyB0aGVuIHdlIGNhbiBpbmZlciB0aGF0IHRoZSBgbWV0YWAgYXJnIHBhc3NlZCBpcyB1c2VkIGZvciBmb3JtYXR0aW5nXG4gICAgICBtZXNzYWdlID0gZm9ybWF0KG1lc3NhZ2UsIG1ldGEpO1xuICAgICAgbWV0YSA9IHt9O1xuICAgIH0gZWxzZSBpZiAoIWlzRXJyb3IobWVzc2FnZSkpIHtcbiAgICAgIGlmIChpc0Vycm9yKG1ldGEpKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKG1ldGEpO1xuICAgICAgICBtZXRhID0ge307XG4gICAgICB9IGVsc2UgaWYgKCFpc09iamVjdChtZXRhKSAmJiAhaXNVbmRlZmluZWQobWV0YSkgJiYgIWlzTnVsbChtZXRhKSkge1xuICAgICAgICAvLyBJZiB0aGUgYG1ldGFgIHZhcmlhYmxlIHBhc3NlZCB3YXMgbm90IGFuIE9iamVjdCB0aGVuIGNvbnZlcnQgaXRcbiAgICAgICAgbWVzc2FnZSA9IGZvcm1hdChtZXNzYWdlLCBtZXRhKTtcbiAgICAgICAgbWV0YSA9IHt9O1xuICAgICAgfSBlbHNlIGlmICghaXNTdHJpbmcobWVzc2FnZSkpIHtcbiAgICAgICAgLy8gSWYgdGhlIG1lc3NhZ2UgaXMgbm90IGEgc3RyaW5nIHRoZW4gd2Ugc2hvdWxkIHJ1biBgdXRpbC5mb3JtYXRgIG9uIGl0XG4gICAgICAgIC8vIGFzc3VtaW5nIHdlJ3JlIGZvcm1hdHRpbmcgaXQgbGlrZSBpdCB3YXMgYW5vdGhlciBhcmd1bWVudFxuICAgICAgICAvLyAoYXMgb3Bwb3NlZCB0byB1c2luZyBzb21ldGhpbmcgbGlrZSBmYXN0LWpzb24tc3RyaW5naWZ5KVxuICAgICAgICBtZXNzYWdlID0gZm9ybWF0KG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNFcnJvcihtZXRhKSkge1xuICAgICAgZXJyb3JzLnB1c2gobWV0YSk7XG4gICAgICAvLyBoYW5kbGUgYWRkaXRpb25hbCBhcmdzXG4gICAgICBjb25zdCBtZXNzYWdlcyA9IFtdO1xuICAgICAgaWYgKGlzRXJyb3IobWVzc2FnZSkpIHtcbiAgICAgICAgZXJyb3JzLnVuc2hpZnQobWVzc2FnZSk7XG4gICAgICAgIG1lc3NhZ2UgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgYXJnIG9mIG9yaWdpbmFsQXJncy5zbGljZSgyICsgbW9kaWZpZXIpKSB7XG4gICAgICAgIC8vIHNob3VsZCBza2lwIHRoaXMgYmV0dGVyIHdpdGggc2xpY2UgYW5kIG1vZGlmaWVyIGFkanVzdG1lbnRcbiAgICAgICAgaWYgKG1ldGEgPT09IGFyZykgY29udGludWU7XG4gICAgICAgIGlmIChpc0Vycm9yKGFyZykpIGVycm9ycy5wdXNoKGFyZyk7XG4gICAgICAgIGVsc2UgbWVzc2FnZXMucHVzaChhcmcpO1xuXG4gICAgICAgIGlmIChtZXNzYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbWVzc2FnZSA9IGZvcm1hdCguLi5tZXNzYWdlcyk7XG4gICAgICAgICAgaGFzTWVzc2FnZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxldmVsID09PSAnbG9nJykgbGV2ZWwgPSAnZXJyb3InO1xuXG4gICAgICBtZXRhID0ge307XG4gICAgfVxuXG4gICAgaWYgKCFpc1VuZGVmaW5lZChtZXRhKSAmJiAhaXNPYmplY3QobWV0YSkpIG1ldGEgPSB7IG9yaWdpbmFsX21ldGE6IG1ldGEgfTtcbiAgICBlbHNlIGlmICghaXNPYmplY3QobWV0YSkpIG1ldGEgPSB7fTtcblxuICAgIGlmIChpc0Vycm9yKG1lc3NhZ2UpKSB7XG4gICAgICBlcnJvcnMudW5zaGlmdChtZXNzYWdlKTtcbiAgICAgIG1lc3NhZ2UgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyByZXdyaXRlIGBtZXRhLmVycmAgdG8gYG1ldGEub3JpZ2luYWxfZXJyYCBmb3IgY29uc2lzdGVuY3lcbiAgICAvLyAoaW4gY2FzZSBzb21lb25lIGhhcyBhbiBvYmplY3Qgd2l0aCBgLmVycmAgcHJvcGVydHkgb24gaXQgd2l0aCBhbiBlcnJvcilcbiAgICAvL1xuICAgIGlmIChpc09iamVjdChtZXRhLmVycikpIHtcbiAgICAgIGlmIChpc0Vycm9yKG1ldGEuZXJyKSkgZXJyb3JzLnB1c2gobWV0YS5lcnIpO1xuICAgICAgbWV0YS5vcmlnaW5hbF9lcnIgPSBpc0Vycm9yKG1ldGEuZXJyKSA/IHBhcnNlRXJyKG1ldGEuZXJyKSA6IG1ldGEuZXJyO1xuICAgIH1cblxuICAgIGxldCBlcnI7XG4gICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlcnIgPSBlcnJvcnNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgWy4uLm5ldyBTZXQoZXJyb3JzLm1hcCgoZSkgPT4gZS5tZXNzYWdlKS5maWx0ZXIoQm9vbGVhbikpXS5qb2luKCc7ICcpXG4gICAgICAgICk7XG4gICAgICAgIGVyci5zdGFjayA9IFtcbiAgICAgICAgICAuLi5uZXcgU2V0KGVycm9ycy5tYXAoKGUpID0+IGUuc3RhY2spLmZpbHRlcihCb29sZWFuKSlcbiAgICAgICAgXS5qb2luKCdcXG5cXG4nKTtcbiAgICAgICAgZXJyLmVycm9ycyA9IGVycm9ycztcbiAgICAgIH1cblxuICAgICAgbWV0YS5lcnIgPSBwYXJzZUVycihlcnIpO1xuICAgICAgaWYgKCFpc1N0cmluZyhtZXNzYWdlKSkgbWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8gTk9URTogdGhpcyB3YXMgcmVtb3ZlZCBpbiB2MTAuMi4yIGR1ZSB0byBjaXJjdWxhciByZWZlcmVuY2UgaXNzdWVzXG4gICAgLy8gICAgICAgKHRoZSB3b3JrYXJvdW5kIHdvdWxkIGludm9sdmUgc2FmZVN0cmluZ2lmeSBhbmQgdGhlbiBKU09OLnBhcnNlIHdoaWNoIHdvdWxkIGJlIHBlcmYgYmxvYXQpXG4gICAgLy8gICAgICAgKHRoZXJlIHN0aWxsIG1pZ2h0IGJlIGFub3RoZXIgd29ya2Fyb3VuZCBvciBwZXJoYXBzIHdlIGRvbid0IGFkZCBhbGwgdGhlIGFyZ3MgaGVyZSBleGNlcHQgYWRkaXRpb25hbClcbiAgICAvL1xuICAgIC8vIFNldCBgYXJnc2AgcHJvcCB3aXRoIG9yaWdpbmFsIGFyZ3VtZW50cyBwYXNzZWRcbiAgICAvLyBtZXRhLmFyZ3MgPSBvcmlnaW5hbEFyZ3M7XG5cbiAgICAvLyBTZXQgZGVmYXVsdCBsZXZlbCBvbiBtZXRhXG4gICAgbWV0YS5sZXZlbCA9IGxldmVsO1xuXG4gICAgLy8gQWRkIGBhcHBgIG9iamVjdCB0byBtZXRhZGF0YVxuICAgIGlmICh0aGlzLmFwcEluZm8pIG1ldGEuYXBwID0gdGhpcy5hcHBJbmZvO1xuXG4gICAgLy9cbiAgICAvLyBkZXRlcm1pbmUgbG9nIG1ldGhvZCB0byB1c2VcbiAgICAvL1xuICAgIC8vIGlmIHdlIGRpZG4ndCBwYXNzIGEgbGV2ZWwgYXMgYSBtZXRob2RcbiAgICAvLyAoZS5nLiBjb25zb2xlLmluZm8pLCB0aGVuIHdlIHNob3VsZCBzdGlsbFxuICAgIC8vIHVzZSB0aGUgbG9nZ2VyJ3MgYGxvZ2AgbWV0aG9kIHRvIG91dHB1dFxuICAgIC8vXG4gICAgLy8gYW5kIGZhdGFsIHNob3VsZCB1c2UgZXJyb3IgKGUuZy4gaW4gYnJvd3NlcilcbiAgICAvL1xuICAgIGNvbnN0IG1ldGhvZCA9IG1vZGlmaWVyID09PSAtMSA/ICdsb2cnIDogbGV2ZWw7XG5cbiAgICAvLyBwcmUtaG9va3NcbiAgICBmb3IgKGNvbnN0IGhvb2sgb2YgdGhpcy5jb25maWcuaG9va3MucHJlKSB7XG4gICAgICBbZXJyLCBtZXNzYWdlLCBtZXRhXSA9IGhvb2sobWV0aG9kLCBlcnIsIG1lc3NhZ2UsIG1ldGEpO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8gTk9URTogdXNpbmcgbG9kYXNoIF8ub21pdCBhbmQgXy5waWNrIHdvdWxkIGhhdmUgYmVlbiBfdmVyeSBzbG93X1xuICAgIC8vXG4gICAgLy8gY29uc3Qgb21pdHRlZEFuZFBpY2tlZEZpZWxkcyA9IHtcbiAgICAvLyAgIC4uLl8ub21pdChtZXRhLCB0aGlzLmNvbmZpZy5tZXRhLm9taXR0ZWRGaWVsZHMpLFxuICAgIC8vICAgLi4uXy5waWNrKG1ldGEsIHRoaXMuY29uZmlnLm1ldGEucGlja2VkRmllbGRzKVxuICAgIC8vIH07XG4gICAgLy9cbiAgICAvLyBhbHNvIHdlIGRvbid0IHdhbnQgdG8gbXV0YXRlIGFueXRoaW5nIGluIGBtZXRhYFxuICAgIC8vIGFuZCBpZGVhbGx5IHdlIG9ubHkgd2FudCB0byBwaWNrIGV4YWN0bHkgd2hhdCB3ZSBuZWVkXG4gICAgLy8gKGFuZCBub3QgaGF2ZSB0d28gb3BlcmF0aW9ucywgb25lIGZvciBvbWl0LCBhbmQgb25lIGZvciBwaWNrKVxuICAgIC8vXG5cbiAgICAvLyBzZXQgYSBib29sZWFuIGZsYWcgaWYgd2UgaGFkIHRoZSBzaWxlbnQgc3ltYm9sIG9yIG5vdFxuICAgIGNvbnN0IGhhZFRydWVTaWxlbnRTeW1ib2wgPSBib29sZWFuKG1ldGFbc2lsZW50U3ltYm9sXSk7XG5cbiAgICBpZiAoIWlzRW1wdHkodGhpcy5jb25maWcubWV0YS5yZW1hcHBlZEZpZWxkcykpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIFJlZmxlY3Qub3duS2V5cyh0aGlzLmNvbmZpZy5tZXRhLnJlbWFwcGVkRmllbGRzKSkge1xuICAgICAgICBzZXQobWV0YSwgdGhpcy5jb25maWcubWV0YS5yZW1hcHBlZEZpZWxkc1trZXldLCBnZXQobWV0YSwga2V5KSk7XG4gICAgICAgIHVuc2V0KG1ldGEsIGtleSk7XG4gICAgICAgIC8vIGNsZWFudXAgZW1wdHkgb2JqZWN0cyBhZnRlciByZW1hcHBpbmdcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLm1ldGEuY2xlYW51cFJlbWFwcGluZykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0ga2V5Lmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgY29udGludWU7XG4gICAgICAgICAgY29uc3QgcGFyZW50S2V5ID0ga2V5LnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgICBpZiAoaXNFbXB0eShnZXQobWV0YSwgcGFyZW50S2V5KSkpIHVuc2V0KG1ldGEsIHBhcmVudEtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAhaXNFbXB0eSh0aGlzLmNvbmZpZy5tZXRhLm9taXR0ZWRGaWVsZHMpIHx8XG4gICAgICAhaXNFbXB0eSh0aGlzLmNvbmZpZy5tZXRhLnBpY2tlZEZpZWxkcylcbiAgICApIHtcbiAgICAgIGNvbnN0IGRvdGlmaWVkID0gZG90aWZ5VG9BcnJheShtZXRhKTtcbiAgICAgIC8vIGRvdGlmaWVkID0gW1xuICAgICAgLy8gICAnZXJyLm5hbWUnLFxuICAgICAgLy8gICAnZXJyLm1lc3NhZ2UnLFxuICAgICAgLy8gICAnZXJyLnN0YWNrJyxcbiAgICAgIC8vICAgJ2xldmVsJyxcbiAgICAgIC8vICAgJ2FwcC5uYW1lJyxcbiAgICAgIC8vICAgJ2FwcC52ZXJzaW9uJyxcbiAgICAgIC8vICAgJ2FwcC5ub2RlJyxcbiAgICAgIC8vICAgJ2FwcC5oYXNoJyxcbiAgICAgIC8vICAgLy8gLi4uXG4gICAgICAvLyBdXG5cbiAgICAgIGlmICghaXNFbXB0eSh0aGlzLmNvbmZpZy5tZXRhLm9taXR0ZWRGaWVsZHMpKSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiB0aGlzLmNvbmZpZy5tZXRhLm9taXR0ZWRGaWVsZHMpIHtcbiAgICAgICAgICAvLyA8aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzk4ODIzNDk+XG4gICAgICAgICAgbGV0IGkgPSBkb3RpZmllZC5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBkb3RpZmllZFtpXSA9PT0gcHJvcCB8fFxuICAgICAgICAgICAgICAoIWlzU3ltYm9sKGRvdGlmaWVkW2ldKSAmJiBkb3RpZmllZFtpXS5pbmRleE9mKGAke3Byb3B9LmApID09PSAwKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBkb3RpZmllZC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBpY2tlZFN5bWJvbHMgPSBbXTtcblxuICAgICAgaWYgKCFpc0VtcHR5KHRoaXMuY29uZmlnLm1ldGEucGlja2VkRmllbGRzKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb3Agb2YgdGhpcy5jb25maWcubWV0YS5waWNrZWRGaWVsZHMpIHtcbiAgICAgICAgICAvLyByZXNwb25zZS5oZWFkZXJzLmJvb3BcbiAgICAgICAgICAvLyByZXNwb25zZS5oZWFkZXJzLmJlZXBcbiAgICAgICAgICAvLyByZXNwb25zZS5ib2R5XG4gICAgICAgICAgLy8gcmVzcG9uc2UudGV4dFxuICAgICAgICAgIC8vIHJlc3BvbnNlXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIHNwbGl0IGJ5IHRoZSBmaXJzdCBwZXJpb2QgYW5kIG9taXQgYW55IGtleXMgZnJvbSBkb3RpZmllZCBzdGFydGluZyB3aXRoIGl0XG4gICAgICAgICAgaWYgKGlzU3ltYm9sKHByb3ApKSB7XG4gICAgICAgICAgICBpZiAobWV0YVtwcm9wXSkgcGlja2VkU3ltYm9scy5wdXNoKFtwcm9wLCBtZXRhW3Byb3BdXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcHJvcC5pbmRleE9mKCcuJyk7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBwcm9wLnNsaWNlKDAsIGluZGV4ICsgMSk7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgIGxldCBpID0gZG90aWZpZWQubGVuZ3RoO1xuICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvdGlmaWVkW2ldID09PSBrZXkuc2xpY2UoMCwgLTEpKSBkb3RpZmllZC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZG90aWZpZWRbaV0uaW5kZXhPZihrZXkpID09PSAwKSBkb3RpZmllZC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBmaW5hbGx5IGFkZCBpdCBpZiBpdCBkaWQgbm90IGFscmVhZHkgZXhpc3RcbiAgICAgICAgICBpZiAoZG90aWZpZWQuaW5kZXhPZihwcm9wKSA9PT0gLTEpIGRvdGlmaWVkLnB1c2gocHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy9cbiAgICAgIC8vIGl0ZXJhdGUgb3ZlciBhbGwgZG90aWZpZWQgdmFsdWVzIHRvIGNoZWNrIGZvciBzeW1ib2xzXG4gICAgICAvL1xuICAgICAgLy8gTk9URTogdGhpcyBkb2VzIG5vdCB0YWtlIGludG8gYWNjb3VudCB0aGF0IHRoZXkgY291bGQgYWxyZWFkeSBiZSBpbiBgcGlja2VkU3ltYm9sc2BcbiAgICAgIC8vICAgICAgIChhbmQgaXQgZG9lc24ndCBhbHNvIGRvIGJpZ2ludHMgeWV0KVxuICAgICAgLy9cbiAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBkb3RpZmllZCkge1xuICAgICAgICBpZiAoaXNTeW1ib2wocHJvcCkpIHtcbiAgICAgICAgICBpZiAobWV0YVtwcm9wXSAhPT0gdW5kZWZpbmVkKSBwaWNrZWRTeW1ib2xzLnB1c2goW3Byb3AsIG1ldGFbcHJvcF1dKTtcbiAgICAgICAgfSBlbHNlIGlmIChtZXRhW1N5bWJvbC5mb3IocHJvcCldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwaWNrZWRTeW1ib2xzLnB1c2goW1N5bWJvbC5mb3IocHJvcCksIG1ldGFbU3ltYm9sLmZvcihwcm9wKV1dKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvL1xuICAgICAgLy8gbm93IHdlIGNhbGwgcGljay1kZWVwIHVzaW5nIHRoZSBmaW5hbCBhcnJheVxuICAgICAgLy9cbiAgICAgIC8vIE5PVEU6IHRoaXMgZG9lcyBub3QgcGljayBzeW1ib2xzLCBiaWdpbnRzLCBub3Igc3RyZWFtc1xuICAgICAgLy8gICAgICAgPGh0dHBzOi8vZ2l0aHViLmNvbS9zdHJpa2VlbnRjby9waWNrLWRlZXAvaXNzdWVzLzI+XG4gICAgICAvLyAgICAgICA8aHR0cHM6Ly9naXRodWIuY29tL3N0cmlrZWVudGNvL3BpY2stZGVlcC9pc3N1ZXMvMj5cbiAgICAgIC8vXG4gICAgICAvLyBOT1RFOiB0aGlzIGlzIHdyYXBwZWQgaW4gdHJ5L2NhdGNoIGluIGNhc2Ugc2ltaWxhciBlcnJvcnMgb2NjdXJcbiAgICAgIC8vICAgICAgIDxodHRwczovL2dpdGh1Yi5jb20vc3RyaXBlL3N0cmlwZS1ub2RlL2lzc3Vlcy8xNzk2PlxuICAgICAgLy9cbiAgICAgIHRyeSB7XG4gICAgICAgIG1ldGEgPSBwaWNrRGVlcChtZXRhLCBkb3RpZmllZCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhpcy5jb25maWcubG9nZ2VyLmVycm9yKGVycik7XG4gICAgICB9XG5cbiAgICAgIC8vXG4gICAgICAvLyBpZiB0aGVyZSB3ZXJlIGFueSB0b3AtbGV2ZWwgc3ltYm9scyB0byBiZVxuICAgICAgLy8gcGlja2VkIHRoZW4gd2UgbmVlZCB0byBhZGQgdGhlbSBiYWNrIGhlcmUgdG8gdGhlIGxpc3RcbiAgICAgIC8vXG4gICAgICAvLyBOT1RFOiB3ZSdkIHByb2JhYmx5IHdhbnQgdG8gZG8gdGhlIHNhbWUgZm9yIGJpZ2ludHMgYXMgc3ltYm9sc1xuICAgICAgLy9cbiAgICAgIGlmIChwaWNrZWRTeW1ib2xzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgcGlja2VkU3ltYm9scykge1xuICAgICAgICAgIG1ldGFba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gb25seSBpbnZva2UgbG9nZ2VyIG1ldGhvZHMgaWYgaXQgd2FzIG5vdCBzaWxlbnRcbiAgICBpZiAoIXRoaXMuY29uZmlnLnNpbGVudCAmJiAhaGFkVHJ1ZVNpbGVudFN5bWJvbCkge1xuICAgICAgLy8gU2hvdyBzdGFjayB0cmFjZSBpZiBuZWNlc3NhcnkgKGFsb25nIHdpdGggYW55IG1ldGFkYXRhKVxuICAgICAgaWYgKGlzRXJyb3IoZXJyKSAmJiB0aGlzLmNvbmZpZy5zaG93U3RhY2spIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5tZXRhLnNob3cgfHwgaXNFbXB0eShtZXRhKSkge1xuICAgICAgICAgIHRoaXMuY29uZmlnLmxvZ2dlclttZXRob2RdKC4uLihoYXNNZXNzYWdlID8gW21lc3NhZ2UsIGVycl0gOiBbZXJyXSkpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHRoaXMuY29uZmlnLm1ldGEuaGlkZU1ldGEgJiZcbiAgICAgICAgICBtZXRhW3RoaXMuY29uZmlnLm1ldGEuaGlkZU1ldGFdXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuY29uZmlnLmxvZ2dlclttZXRob2RdKC4uLihoYXNNZXNzYWdlID8gW21lc3NhZ2UsIGVycl0gOiBbZXJyXSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29uZmlnLmxvZ2dlclttZXRob2RdKFxuICAgICAgICAgICAgLi4uKGhhc01lc3NhZ2UgPyBbbWVzc2FnZSwgZXJyLCBtZXRhXSA6IFtlcnIsIG1ldGFdKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuY29uZmlnLm1ldGEuc2hvdyB8fCBpc0VtcHR5KG1ldGEpKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmxvZ2dlclttZXRob2RdKG1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHRoaXMuY29uZmlnLm1ldGEuaGlkZU1ldGEgJiYgbWV0YVt0aGlzLmNvbmZpZy5tZXRhLmhpZGVNZXRhXSkgfHxcbiAgICAgICAgKHRoaXMuY29uZmlnLm1ldGEuaGlkZUhUVFAgJiYgbWV0YVt0aGlzLmNvbmZpZy5tZXRhLmhpZGVIVFRQXSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLmNvbmZpZy5sb2dnZXJbbWV0aG9kXShtZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmxvZ2dlclttZXRob2RdKG1lc3NhZ2UsIG1ldGEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBvc3QtaG9va3NcbiAgICBpZiAodGhpcy5jb25maWcuaG9va3MucG9zdC5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4geyBtZXRob2QsIGVyciwgbWVzc2FnZSwgbWV0YSB9O1xuICAgIHJldHVybiBwTWFwU2VyaWVzKHRoaXMuY29uZmlnLmhvb2tzLnBvc3QsIChob29rKSA9PlxuICAgICAgaG9vayhtZXRob2QsIGVyciwgbWVzc2FnZSwgbWV0YSlcbiAgICApXG4gICAgICAudGhlbigpXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICB0aGlzLmNvbmZpZy5sb2dnZXIuZXJyb3IoZXJyKTtcbiAgICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXhlO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0FBLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQzs7QUFFM0I7QUFDQSxNQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDeEIsTUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDNUMsTUFBTUcsZ0JBQWdCLEdBQUdILE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUNyRCxNQUFNSSxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUN2QyxNQUFNSyxPQUFPLEdBQUdMLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTU0sUUFBUSxHQUFHTixPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3JDLE1BQU1PLFFBQVEsR0FBR1AsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNyQyxNQUFNUSxZQUFZLEdBQUdSLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDN0MsTUFBTVMsVUFBVSxHQUFHVCxPQUFPLENBQUMsY0FBYyxDQUFD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